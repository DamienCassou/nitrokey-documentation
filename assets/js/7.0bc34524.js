(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{551:function(e,t,n){"use strict";n.r(t);var a=n(33),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"openpgp-key-generation-with-backup"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#openpgp-key-generation-with-backup"}},[e._v("#")]),e._v(" OpenPGP Key Generation With Backup")]),e._v(" "),n("p",[e._v("The following instructions explain the generation of OpenPGP keys and how to copy them to the Nitrokey. This method has the advantage of providing a backup of the keys in case of losing or breaking the Nitrokey. The instructions are based on the command line interface of GnuPG. Thus, you need to have GnuPG installed on your system. The newest GnuPG version for Windows can be found "),n("a",{attrs:{href:"https://www.gpg4win.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),n("OutboundLink")],1),e._v(" and the newest version for MacOS can be found "),n("a",{attrs:{href:"https://gpgtools.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),n("OutboundLink")],1),e._v(". Users of Linux systems please install GnuPG with help of the package manager.")]),e._v(" "),n("h2",{attrs:{id:"key-generation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#key-generation"}},[e._v("#")]),e._v(" Key Generation")]),e._v(" "),n("p",[e._v("At first, you need to generate a key locally. You can decide, which key attributes to use and - most importantly - you can export the key and keep it somewhere save in case you need to restore the key.")]),e._v(" "),n("h3",{attrs:{id:"main-key-and-encryption-subkey"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#main-key-and-encryption-subkey"}},[e._v("#")]),e._v(" Main Key and Encryption Subkey")]),e._v(" "),n("p",[e._v("We can use the command "),n("code",[e._v("gpg --full-generate-key --expert")]),e._v(" to start a guided key generation with all possible options. You can choose the key type (usually RSA (1) or ECC (9)), the length of the key and other attributes. The following output is just a simple example, you may choose other values.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("> gpg --full-generate-key --expert\ngpg (GnuPG) 2.2.10; Copyright (C) 2018 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nPlease select what kind of key you want:\n   (1) RSA and RSA (default)\n   (2) DSA and Elgamal\n   (3) DSA (sign only)\n   (4) RSA (sign only)\n   (7) DSA (set your own capabilities)\n   (8) RSA (set your own capabilities)\n   (9) ECC and ECC\n  (10) ECC (sign only)\n  (11) ECC (set your own capabilities)\n  (13) Existing key\nYour selection? 1\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048)\nRequested keysize is 2048 bits\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want for the subkey? (2048)\nRequested keysize is 2048 bits\nPlease specify how long the key should be valid.\n         0 = key does not expire\n        = key expires in n days\n      w = key expires in n weeks\n      m = key expires in n months\n      y = key expires in n years\nKey is valid for? (0)\nKey does not expire at all\nIs this correct? (y/N) y\n \nGnuPG needs to construct a user ID to identify your key.\n \nReal name: Jane Doe\nEmail address: jane@example.com\nComment:\nYou selected this USER-ID:\n    \"Jane Doe \"\n \nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\ngpg: key 0EFFB0704391497C marked as ultimately trusted\ngpg: revocation certificate stored as '/home/nitrokey//.gnupg/openpgp-revocs.d/9D12C91F6FC4CD6E10A1727A0EFFB0704391497C.rev'\npublic and secret key created and signed.\n \npub   rsa2048 2018-09-17 [SC]\n      9D12C91F6FC4CD6E10A1727A0EFFB0704391497C\nuid                      Jane Doe \nsub   rsa2048 2018-09-17 [E]\n")])])]),n("p",[e._v("The following table illustrates which algorithm can be used on which device, in case you want to use different key attributes.")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"right"}}),e._v(" "),n("th",{staticStyle:{"text-align":"center"}},[e._v("Start")]),e._v(" "),n("th",{staticStyle:{"text-align":"right"}},[e._v("Pro + Storage")]),e._v(" "),n("th",{staticStyle:{"text-align":"right"}},[e._v("Pro 2 + Storage 2")])])]),e._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"right"}},[e._v("rsa1024")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("✓")]),e._v(" "),n("td",{staticStyle:{"text-align":"right"}},[e._v("✓")]),e._v(" "),n("td",{staticStyle:{"text-align":"right"}})]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"right"}},[e._v("rsa2048")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("✓")]),e._v(" "),n("td",{staticStyle:{"text-align":"right"}},[e._v("✓")]),e._v(" "),n("td",{staticStyle:{"text-align":"right"}},[e._v("✓")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"right"}},[e._v("rsa3072")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}}),e._v(" "),n("td",{staticStyle:{"text-align":"right"}},[e._v("✓")]),e._v(" "),n("td",{staticStyle:{"text-align":"right"}},[e._v("✓")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"right"}},[e._v("rsa4096")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}}),e._v(" "),n("td",{staticStyle:{"text-align":"right"}},[e._v("✓")]),e._v(" "),n("td",{staticStyle:{"text-align":"right"}},[e._v("✓")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"right"}},[e._v("curve25519 (ECC)")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("✓")]),e._v(" "),n("td",{staticStyle:{"text-align":"right"}}),e._v(" "),n("td",{staticStyle:{"text-align":"right"}})]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"right"}},[e._v("NIST (ECC)")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("✓")]),e._v(" "),n("td",{staticStyle:{"text-align":"right"}}),e._v(" "),n("td",{staticStyle:{"text-align":"right"}},[e._v("✓")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"right"}},[e._v("Brainpool (ECC)")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}}),e._v(" "),n("td",{staticStyle:{"text-align":"right"}}),e._v(" "),n("td",{staticStyle:{"text-align":"right"}},[e._v("✓")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"right"}},[e._v("secp256k1")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("✓")]),e._v(" "),n("td",{staticStyle:{"text-align":"right"}}),e._v(" "),n("td",{staticStyle:{"text-align":"right"}})])])]),e._v(" "),n("h2",{attrs:{id:"subkey-for-authentication"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subkey-for-authentication"}},[e._v("#")]),e._v(" Subkey for Authentication")]),e._v(" "),n("p",[e._v("You now have a main key with the capability to sign and certify (marked as [SC]) and a subkey for encryption (marked as [E]). It is necessary to have another subkey for use cases in which authentication is needed. This subkey is generated in the next step. Type in "),n("code",[e._v("gpg --edit-key --expert keyID")]),e._v(' to start the process, whereas "keyID" is either the id of the key or the email address used during key generation.')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("> gpg --edit-key --expert jane@example.com\ngpg (GnuPG) 2.2.10; Copyright (C) 2018 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n \nSecret key is available.\n \nsec  rsa2048/0EFFB0704391497C\n     created: 2018-09-17  expires: never       usage: SC\n     trust: ultimate      validity: ultimate\nssb  rsa2048/A9A814C210F16700\n     created: 2018-09-17  expires: never       usage: E\n[ultimate] (1). Jane Doe \n \ngpg>\n")])])]),n("p",[e._v("Now you are in the interactive mode of GnuPG and you can add a key by simply typing "),n("code",[e._v("addkey")]),e._v('. You need to choose the key you want to use. It is crucial to choose "set your own capabilities", because we want to have the "authenticate" capability which is not available otherwise. We toggle sign and encrypt by typing '),n("code",[e._v("s")]),e._v(" and "),n("code",[e._v("e")]),e._v(" and we activate authenticate by typing "),n("code",[e._v("a")]),e._v(".")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("gpg> addkey\nPlease select what kind of key you want:\n   (3) DSA (sign only)\n   (4) RSA (sign only)\n   (5) Elgamal (encrypt only)\n   (6) RSA (encrypt only)\n   (7) DSA (set your own capabilities)\n   (8) RSA (set your own capabilities)\n  (10) ECC (sign only)\n  (11) ECC (set your own capabilities)\n  (12) ECC (encrypt only)\n  (13) Existing key\nYour selection? 8\n \nPossible actions for a RSA key: Sign Encrypt Authenticate\nCurrent allowed actions: Sign Encrypt\n \n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n \nYour selection? s\n \nPossible actions for a RSA key: Sign Encrypt Authenticate\nCurrent allowed actions: Encrypt\n \n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n \nYour selection? e\n \nPossible actions for a RSA key: Sign Encrypt Authenticate\nCurrent allowed actions:\n \n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n \nYour selection? a\n \nPossible actions for a RSA key: Sign Encrypt Authenticate\nCurrent allowed actions: Authenticate\n \n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n \nYour selection? q\n")])])]),n("p",[e._v("We quit with "),n("code",[e._v("q")]),e._v(". Afterwards we need to answer the same questions as before. Finally, we have a ready-to-go key set which we can import to our device.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("RSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048)\nRequested keysize is 2048 bits\nPlease specify how long the key should be valid.\n         0 = key does not expire\n        = key expires in n days\n      w = key expires in n weeks\n      m = key expires in n months\n      y = key expires in n years\nKey is valid for? (0)\nKey does not expire at all\nIs this correct? (y/N) y\nReally create? (y/N) y\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\n \nsec  rsa2048/0EFFB0704391497C\n     created: 2018-09-17  expires: never       usage: SC\n     trust: ultimate      validity: ultimate\nssb  rsa2048/A9A814C210F16700\n     created: 2018-09-17  expires: never       usage: E\nssb  rsa2048/61F186B8B0BBD5D5\n     created: 2018-09-17  expires: never       usage: A\n[ultimate] (1). Jane Doe \n \ngpg> quit\nSave changes? (y/N) y\n")])])]),n("p",[e._v("Now is good time to backup your key. Please keep this backup very secure. It is best practice to never have this key on a regular computer which has connection to the internet, so that the key never gets compromised. You can create a backup with something like:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("> gpg --export-secret-keys jane@example.com > sec-key.asc\n")])])]),n("h2",{attrs:{id:"key-import"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#key-import"}},[e._v("#")]),e._v(" Key Import")]),e._v(" "),n("p",[e._v("You have a main key and two subkeys which can be imported to your Nitrokey. Before proceeding please make sure that you really have a backup of the key, if you need one. The "),n("code",[e._v("keytocard")]),e._v(" command used in the next steps will "),n("strong",[e._v("delete")]),e._v(" your key from your disk!")]),e._v(" "),n("p",[e._v("We start the process by accessing the interactive interface of GnuPG again with "),n("code",[e._v("gpg --edit-key --expert keyID")]),e._v(", whereas "),n("code",[e._v("keyID")]),e._v(" is either the id of the key or the email address used during key generation.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("> gpg --edit-key --expert jane@example.com\ngpg (GnuPG) 2.2.10; Copyright (C) 2018 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n \nSecret key is available.\n \nsec  rsa2048/0EFFB0704391497C\n     created: 2018-09-17  expires: never       usage: SC\n     trust: ultimate      validity: ultimate\nssb  rsa2048/A9A814C210F16700\n     created: 2018-09-17  expires: never       usage: E\nssb  rsa2048/61F186B8B0BBD5D5\n     created: 2018-09-17  expires: never       usage: A\n[ultimate] (1). Jane Doe \n \ngpg> keytocard\nReally move the primary key? (y/N) y\nPlease select where to store the key:\n   (1) Signature key\n   (3) Authentication key\nYour selection? 1\n \nsec  rsa2048/0EFFB0704391497C\n     created: 2018-09-17  expires: never       usage: SC\n     trust: ultimate      validity: ultimate\nssb  rsa2048/A9A814C210F16700\n     created: 2018-09-17  expires: never       usage: E\nssb  rsa2048/61F186B8B0BBD5D5\n     created: 2018-09-17  expires: never       usage: A\n[ultimate] (1). Jane Doe \n")])])]),n("p",[e._v("We just imported the main key to the card. Now we proceed with the two subkeys. We type "),n("code",[e._v("key 1")]),e._v(" to select the encryption subkey and type in "),n("code",[e._v("keytocard")]),e._v(" again and select the slot to use.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("gpg> key 1\n \nsec  rsa2048/0EFFB0704391497C\n     created: 2018-09-17  expires: never       usage: SC\n     trust: ultimate      validity: ultimate\nssb* rsa2048/A9A814C210F16700\n     created: 2018-09-17  expires: never       usage: E\nssb  rsa2048/61F186B8B0BBD5D5\n     created: 2018-09-17  expires: never       usage: A\n[ultimate] (1). Jane Doe \n\ngpg> keytocard\nPlease select where to store the key:\n   (2) Encryption key\nYour selection? 2\n \nsec  rsa2048/0EFFB0704391497C\n     created: 2018-09-17  expires: never       usage: SC\n     trust: ultimate      validity: ultimate\nssb* rsa2048/A9A814C210F16700\n     created: 2018-09-17  expires: never       usage: E\nssb  rsa2048/61F186B8B0BBD5D5\n     created: 2018-09-17  expires: never       usage: A\n[ultimate] (1). Jane Doe \n")])])]),n("p",[e._v("Now we deselect the first key with "),n("code",[e._v("key 1")]),e._v(" and select the second subkey with "),n("code",[e._v("key 2")]),e._v(" and move it as well with "),n("code",[e._v("keytocard")]),e._v(". Afterwards we quit and save the changes.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("gpg> key 1\n \nsec  rsa2048/0EFFB0704391497C\n     created: 2018-09-17  expires: never       usage: SC\n     trust: ultimate      validity: ultimate\nssb  rsa2048/A9A814C210F16700\n     created: 2018-09-17  expires: never       usage: E\nssb  rsa2048/61F186B8B0BBD5D5\n     created: 2018-09-17  expires: never       usage: A\n[ultimate] (1). Jane Doe \n \ngpg> key 2\n \nsec  rsa2048/0EFFB0704391497C\n     created: 2018-09-17  expires: never       usage: SC\n     trust: ultimate      validity: ultimate\nssb  rsa2048/A9A814C210F16700\n     created: 2018-09-17  expires: never       usage: E\nssb* rsa2048/61F186B8B0BBD5D5\n     created: 2018-09-17  expires: never       usage: A\n[ultimate] (1). Jane Doe \n \ngpg> keytocard\nPlease select where to store the key:\n   (3) Authentication key\nYour selection? 3\n \nsec  rsa2048/0EFFB0704391497C\n     created: 2018-09-17  expires: never       usage: SC\n     trust: ultimate      validity: ultimate\nssb  rsa2048/A9A814C210F16700\n     created: 2018-09-17  expires: never       usage: E\nssb* rsa2048/61F186B8B0BBD5D5\n     created: 2018-09-17  expires: never       usage: A\n[ultimate] (1). Jane Doe \n \ngpg> quit\nSave changes? (y/N) y\n")])])]),n("p",[e._v("Your keys are now moved to the Nitrokey and thus secured in hardware. Congratulations!")]),e._v(" "),n("h2",{attrs:{id:"exporting-public-key-and-keyserver-usage"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#exporting-public-key-and-keyserver-usage"}},[e._v("#")]),e._v(" Exporting Public Key and Keyserver Usage")]),e._v(" "),n("p",[e._v("Although you can start to use your Nitrokey right away after generating the keys on your system, you need to import your public key on every system, you want to use the Nitrokey on. So to be prepared you have two options: You either save the public key anywhere you like and use it on another system or you save the public key on a webpage/keyserver.")]),e._v(" "),n("h3",{attrs:{id:"generating-a-public-key-file"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#generating-a-public-key-file"}},[e._v("#")]),e._v(" Generating a Public Key File")]),e._v(" "),n("p",[e._v("To get a simple file of your public key, you can just use "),n("code",[e._v("gpg --armor --export keyID > pubkey.asc")]),e._v('. Use either the fingerprint as "keyID" (look at '),n("code",[e._v("gpg -K")]),e._v(" to get it) or just use your email address as an identifier.")]),e._v(" "),n("p",[e._v("You can carry this file with you or send it to anyone who you like. This file is not secret at all. If you want to use the Nitrokey on another system, you first import this public key via "),n("code",[e._v("gpg --import pubkey.asc")]),e._v(" and then types "),n("code",[e._v("gpg --card-status")]),e._v(" so that the system knows where to look for this key. That's all.")]),e._v(" "),n("h3",{attrs:{id:"uploading-the-public-key"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uploading-the-public-key"}},[e._v("#")]),e._v(" Uploading the Public Key")]),e._v(" "),n("p",[e._v("If you do not want to carry a public keyfile with you, you can upload it to keyserver. You can do this by typing "),n("code",[e._v("gpg --keyserver search.keyserver.net --send-key keyID")]),e._v(". If you are using another machine you can just import it by using "),n("code",[e._v("gpg --keyserver search.keyserver.net --recv-key keyID")]),e._v(".")]),e._v(" "),n("p",[e._v("Another possibility is to change the URL setting on your card. Start "),n("code",[e._v("gpg --card-edit")]),e._v(" again and first set the URL where the key is situated (e.g. on the keyserver or on your webpage etc.) via the "),n("code",[e._v("url")]),e._v(" command. From now on you can import the key on another system by just using the "),n("code",[e._v("fetch")]),e._v(" command within the "),n("code",[e._v("gpg --card-edit environment")]),e._v(".")])])}),[],!1,null,null,null);t.default=i.exports}}]);