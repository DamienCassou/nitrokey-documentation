(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{509:function(e,t,n){"use strict";n.r(t);var a=n(33),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"openpgp-key-generation-on-device"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#openpgp-key-generation-on-device"}},[e._v("#")]),e._v(" OpenPGP Key Generation On-Device")]),e._v(" "),n("p",[e._v("The following instructions explain the generation of OpenPGP keys directly on the Nitrokey. This is done by using the command line interface of GnuPG. Thus, you need to have GnuPG installed on your system. The newest GnuPG version for Windows can be found "),n("a",{attrs:{href:"https://www.gpg4win.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),n("OutboundLink")],1),e._v(" and the newest version for MacOS can be found "),n("a",{attrs:{href:"https://gpgtools.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),n("OutboundLink")],1),e._v(". Users of Linux systems please install GnuPG with help of the package manager.")]),e._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[e._v("Note")]),e._v(" "),n("p",[e._v("These instructions are based on GnuPG version 2.2.6 or higher. Some Linux Distributions have an older version installed. In this case please choose a different method as listed "),n("a",{attrs:{href:"https://www.nitrokey.com/documentation/openpgp-email-encryption",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),n("OutboundLink")],1),e._v(" or install a newer version if possible.")])]),e._v(" "),n("h2",{attrs:{id:"key-generation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#key-generation"}},[e._v("#")]),e._v(" Key Generation")]),e._v(" "),n("p",[e._v("The following descriptions explain the basic key generation on-device via GnuPG's command line interface. The default behaviour is to generate RSA keys of 2048 bit size. If you want to change the key algorithm and length, have a look at the next section first.")]),e._v(" "),n("p",[e._v("Open a command line and type "),n("code",[e._v("gpg2 --card-edit")]),e._v(".")]),e._v(" "),n("p",[e._v("To open the Windows command line please push the Windows-key and R-key. Now type 'cmd.exe' in the text field and hit enter. To open a Terminal on macOS or GNU/Linux please use the application search (e.g. spotlight on macOS).")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("> gpg2 --card-edit\n \nReader ...........: 20A0:4108:0000320E0000000000000000:0\nApplication ID ...: D27600012401020100050000320E0000\nVersion ..........: 2.1\nManufacturer .....: ZeitControl\nSerial number ....: 0000320E\nName of cardholder: [not set]\nLanguage prefs ...: de\nSex ..............: unspecified\nURL of public key : [not set]\nLogin data .......: [not set]\nSignature PIN ....: forced\nKey attributes ...: rsa2048 rsa2048 rsa2048\nMax. PIN lengths .: 32 32 32\nPIN retry counter : 3 0 3\nSignature counter : 0\nSignature key ....: [none]\nEncryption key....: [none]\nAuthentication key: [none]\nGeneral key info..: [none]\n \ngpg/card>\n")])])]),n("p",[e._v("Now you are in the interactive interface of GnuPG. Activate the admin commands with "),n("code",[e._v("admin")]),e._v(" and use "),n("code",[e._v("generate")]),e._v(" afterwards to start the generation of keys.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("gpg/card> admin                                                                                          \nAdmin commands are allowed                                                                               \n \ngpg/card> generate                                                                                       \nMake off-card backup of encryption key? (Y/n) n                                                          \n \nPlease note that the factory settings of the PINs are                                                    \n   PIN = '123456'     Admin PIN = '12345678'                                                             \nYou should change them using the command --change-pin                                                    \n \nPlease specify how long the key should be valid.                                                         \n         0 = key does not expire                                                                         \n      <n>  = key expires in n days                                                                       \n      <n>w = key expires in n weeks                                                                      \n      <n>m = key expires in n months                                                                     \n      <n>y = key expires in n years                                                                      \nKey is valid for? (0)                                                                                    \nKey does not expire at all                                                                               \nIs this correct? (y/N) y                                                                                 \n \nGnuPG needs to construct a user ID to identify your key.                                                 \n \nReal name: Jane Doe                                                                                      \nEmail address: jane@example.com                                                                              \nComment:                                                                                                 \nYou selected this USER-ID:                                                                               \n\"Jane Doe <jane@doecom>\"                                                                            \n \nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O                                                    \ngpg: key 817E149CA002B92F marked as ultimately trusted                                                   \ngpg: revocation certificate stored as '/home/nitrokey//.gnupg/openpgp-revocs.d/E62F445E8BB4B5085C031F5381\n7E149CA002B92F.rev'                                                                                      \npublic and secret key created and signed.                                                                \n \n \ngpg/card>\n</jane@doe.com></n></n></n></n>\n")])])]),n("p",[n("strong",[e._v("Please do not create the suggested off-card backup.")]),e._v(' This "backup" does only save the encryption key, but not the signature and authentication keys. In case of a loss of the device, you will not be able to restore the whole key set. So on the one hand it is no full backup (use '),n("a",{attrs:{href:"https://www.nitrokey.com/documentation/openpgp-create-backup",target:"_blank",rel:"noopener noreferrer"}},[e._v("these instructions"),n("OutboundLink")],1),e._v(" instead, if you need one) and on the other hand you risk that someone else can get in possession of your encryption key. The advantage of generating keys on-device is to make sure that keys are stored securely. Therefore, we recommend to skip this half-backup.")]),e._v(" "),n("p",[e._v("Now you have a complete key set on your device which can be used for the "),n("a",{attrs:{href:"https://www.nitrokey.com/documentation/applications",target:"_blank",rel:"noopener noreferrer"}},[e._v("various applications"),n("OutboundLink")],1),e._v(" listed on our site. Type "),n("code",[e._v("quit")]),e._v(" and hit enter to exit.")]),e._v(" "),n("h2",{attrs:{id:"change-key-attributes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#change-key-attributes"}},[e._v("#")]),e._v(" Change Key Attributes")]),e._v(" "),n("p",[e._v("This section is about changing the key attributes. If you want to use the default values, you can proceed with the next section.")]),e._v(" "),n("p",[e._v("Open a command line and type "),n("code",[e._v("gpg2 --card-edit --expert")]),e._v(".")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("> gpg2 --card-edit --expert\n \nReader ...........: 20A0:4108:0000320E0000000000000000:0\nApplication ID ...: D27600012401020100050000320E0000\nVersion ..........: 2.1\nManufacturer .....: ZeitControl\nSerial number ....: 0000320E\nName of cardholder: [not set]\nLanguage prefs ...: de\nSex ..............: unspecified\nURL of public key : [not set]\nLogin data .......: [not set]\nSignature PIN ....: forced\nKey attributes ...: rsa2048 rsa2048 rsa2048\nMax. PIN lengths .: 32 32 32\nPIN retry counter : 3 0 3\nSignature counter : 0\nSignature key ....: [none]\nEncryption key....: [none]\nAuthentication key: [none]\nGeneral key info..: [none]\n")])])]),n("p",[e._v('Now you are in the interactive interface of GnuPG. As you can see in the "Key attributes" field above, the default value rsa2048 is set. To change them, activate the admin commands with '),n("code",[e._v("admin")]),e._v(" and use "),n("code",[e._v("key-attr")]),e._v(" afterwards to change the attributes of the keys.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("gpg/card> admin\nAdmin commands are allowed\n \ngpg/card> key-attr\nChanging card key attribute for: Signature key\nPlease select what kind of key you want:\n&nbsp;&nbsp; (1) RSA\n&nbsp;&nbsp; (2) ECC\nYour selection? 1\nWhat keysize do you want? (2048) 4096\nThe card will now be re-configured to generate a key of 4096 bits\nChanging card key attribute for: Encryption key\nPlease select what kind of key you want:\n&nbsp;&nbsp; (1) RSA\n&nbsp;&nbsp; (2) ECC\nYour selection? 1\nWhat keysize do you want? (2048) 4096\nThe card will now be re-configured to generate a key of 4096 bits\nChanging card key attribute for: Authentication key\nPlease select what kind of key you want:\n&nbsp;&nbsp; (1) RSA\n&nbsp;&nbsp; (2) ECC\nYour selection? 1\nWhat keysize do you want? (2048) 4096\nThe card will now be re-configured to generate a key of 4096 bits\n")])])]),n("p",[e._v("You can choose the attribute for each key (that is, signature, encryption and authentication key). Most people will use the same attributes for every key. Type "),n("code",[e._v("list")]),e._v(' to see the results (have look at the "Key attributes" field, which now reads rsa4096).')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("gpg/card> list\n \nReader ...........: 20A0:4108:0000320E0000000000000000:0\nApplication ID ...: D27600012401020100050000320E0000\nVersion ..........: 2.1\nManufacturer .....: ZeitControl\nSerial number ....: 0000320E\nName of cardholder: [not set]\nLanguage prefs ...: de\nSex ..............: unspecified\nURL of public key : [not set]\nLogin data .......: [not set]\nSignature PIN ....: forced\nKey attributes ...: rsa4096 rsa4096 rsa4096\nMax. PIN lengths .: 32 32 32\nPIN retry counter : 3 0 3\nSignature counter : 0\nSignature key ....: [none]\nEncryption key....: [none]\nAuthentication key: [none]\nGeneral key info..: [none]\n")])])]),n("p",[e._v("Type "),n("code",[e._v("quit")]),e._v(" and hit enter to exit or proceed directly with the previous section to actually generate the keys with the key attributes you just set.")]),e._v(" "),n("p",[e._v("The following table illustrates which algorithm can be used on which device.")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"right"}}),e._v(" "),n("th",{staticStyle:{"text-align":"center"}},[e._v("Start")]),e._v(" "),n("th",{staticStyle:{"text-align":"right"}},[e._v("Pro + Storage")]),e._v(" "),n("th",{staticStyle:{"text-align":"right"}},[e._v("Pro 2 + Storage 2")])])]),e._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"right"}},[e._v("rsa1024")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("✓")]),e._v(" "),n("td",{staticStyle:{"text-align":"right"}},[e._v("✓")]),e._v(" "),n("td",{staticStyle:{"text-align":"right"}})]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"right"}},[e._v("rsa2048")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("✓")]),e._v(" "),n("td",{staticStyle:{"text-align":"right"}},[e._v("✓")]),e._v(" "),n("td",{staticStyle:{"text-align":"right"}},[e._v("✓")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"right"}},[e._v("rsa3072")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}}),e._v(" "),n("td",{staticStyle:{"text-align":"right"}},[e._v("✓")]),e._v(" "),n("td",{staticStyle:{"text-align":"right"}},[e._v("✓")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"right"}},[e._v("rsa4096")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}}),e._v(" "),n("td",{staticStyle:{"text-align":"right"}},[e._v("✓")]),e._v(" "),n("td",{staticStyle:{"text-align":"right"}},[e._v("✓")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"right"}},[e._v("curve25519 (ECC)")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("✓")]),e._v(" "),n("td",{staticStyle:{"text-align":"right"}}),e._v(" "),n("td",{staticStyle:{"text-align":"right"}})]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"right"}},[e._v("NIST (ECC)")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("✓")]),e._v(" "),n("td",{staticStyle:{"text-align":"right"}}),e._v(" "),n("td",{staticStyle:{"text-align":"right"}},[e._v("✓")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"right"}},[e._v("Brainpool (ECC)")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}}),e._v(" "),n("td",{staticStyle:{"text-align":"right"}}),e._v(" "),n("td",{staticStyle:{"text-align":"right"}},[e._v("✓")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"right"}},[e._v("secp256k1")]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("✓")]),e._v(" "),n("td",{staticStyle:{"text-align":"right"}}),e._v(" "),n("td",{staticStyle:{"text-align":"right"}})])])]),e._v(" "),n("h2",{attrs:{id:"exporting-public-key-and-keyserver-usage"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#exporting-public-key-and-keyserver-usage"}},[e._v("#")]),e._v(" Exporting Public Key and Keyserver Usage")]),e._v(" "),n("p",[e._v("Although you can start to use your Nitrokey right away after generating the keys on your system, you need to import your public key on every system, you want to use the Nitrokey on. So to be prepared you have two options: You either save the public key anywhere you like and use it on another system or you save the public key on a webpage/keyserver.")]),e._v(" "),n("h3",{attrs:{id:"generating-a-public-key-file"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#generating-a-public-key-file"}},[e._v("#")]),e._v(" Generating a Public Key File")]),e._v(" "),n("p",[e._v("To get a simple file of your public key, you can just use "),n("code",[e._v("gpg2 --armor --export keyID > pubkey.asc")]),e._v('. Use either the fingerprint as "keyID" (look at '),n("code",[e._v("gpg -K")]),e._v(" to get it) or just use your email address as an identifier.")]),e._v(" "),n("p",[e._v("You can carry this file with you or send it to anyone who you like. This file is not secret at all. If you want to use the Nitrokey on another system, you first import this public key via "),n("code",[e._v("gpg2 --import pubkey.asc")]),e._v(" and then types "),n("code",[e._v("gpg2 --card-status")]),e._v(" so that the system knows where to look for this key. That's all.")]),e._v(" "),n("h3",{attrs:{id:"uploading-the-public-key"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uploading-the-public-key"}},[e._v("#")]),e._v(" Uploading the Public Key")]),e._v(" "),n("p",[e._v("If you do not want to carry a public keyfile with you, you can upload it to keyserver. You can do this by typing "),n("code",[e._v("gpg --keyserver search.keyserver.net --send-key keyID")]),e._v(". If you are using another machine you can just import it by using "),n("code",[e._v("gpg --keyserver search.keyserver.net --recv-key keyID")]),e._v(".")]),e._v(" "),n("p",[e._v("Another possibility is to change the URL setting on your card. Start gpg --card-edit again and first set the URL where the key is situated (e.g. on the keyserver or on your webpage etc.) via the "),n("code",[e._v("url")]),e._v(" command. From now on you can import the key on another system by just using the "),n("code",[e._v("fetch")]),e._v(" command within the "),n("code",[e._v("gpg --card-edit")]),e._v(" environment.")])])}),[],!1,null,null,null);t.default=i.exports}}]);