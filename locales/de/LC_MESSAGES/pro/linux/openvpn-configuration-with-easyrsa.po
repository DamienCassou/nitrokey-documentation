# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Nitrokey
# This file is distributed under the same license as the Nitrokey
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nitrokey Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-27 17:16+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:1
msgid "OpenVPN Configuration with Easy-RSA"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:3
msgid ""
"Notice: This guide is work-in-progress, and will be updated accordinlgy. "
"Please take this status into consideration."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:5
msgid ""
"This guide shows how to configure OpenVPN clients to login using a "
"Nitrokey Pro 2 or a Nitrokey Storage 2. For software key management we "
"will be using Easy-RSA, a utility that has been evolving alongside "
"OpenVPN."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:7
msgid ""
"To sign the certificates, we will use a Nitrokey HSM 2 set up as "
"Certificate Authority, however this guide does not cover the set up of "
"the CA itself (it is clear and well documented here)."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:9
msgid ""
"We will use Easy-RSA, because it seems to provide some flexibility, and "
"allows key management via external PKIs. We will use it on the server to "
"issue the signing request, and repeat the same process on the client. The"
" Certificate Signing Requests will be signed by the CA on the Nitorkey "
"HSM, and re-transmitted to the server and the client."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:11
msgid "We can decompose the instructions of the guide as following:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:36
msgid "Prerequisites"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:38
msgid ""
"In the following documentation we will require 3 different machines as "
"following:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:40
msgid "OpenVPN server (v. 2.5) on Debian 10 (EC2 virtual machine - AWS)"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:41
msgid "OpenVPN client (v. 2.4.9) on Fedora 30 (local machine)"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:42
msgid ""
"The Certificate Authority will be accessible from a standalone machine "
"with Fedora 30 (local machine)"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:44
msgid ""
"To interact with the devices we will require OpenSC 0.20 installed on the"
" client and CA machine (the local machines). You can follow the "
"instructions to set it up in this link (*Unix)."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:46
msgid "To download the dependencies on Fedora machines we can this instruction:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:52
msgid "For Debian Linux, more recent OpenSC packages are available here."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:54
msgid "We will use the following Nitrokeys for physical key management:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:56
msgid "An authentication key using the Nitrokey Pro 2 (pdf)"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:58
msgid "A Certificate Authority (CA) using the Nitrokey HSM 2 (pdf)"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:60
msgid ""
"As a reminder, to build a Certificate Authority on Nitrokey HSM 2, you "
"may follow the instructions available in the documentation."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:62
msgid ""
"Alternatively you may set up your own CA on a on a separate machine, or "
"use the OpenVPN tutorial which also relies on Easy-RSA. The last 2 "
"options rely on software solutions for key management."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:66
msgid "Server side"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:68
msgid "1. Install OpenVPN"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:70
msgid "First we need to enable IP Forwarding by editing /etc/sysctl.conf file"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:74
msgid "Uncomment or edit accordingly the following line"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:78
msgid "Close after saving it, and enter this command"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:84
msgid "Change to root and download the GPG key that signed the package"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:90
msgid "Add the URL of the adequate OpenVPN packages to the sources.list file"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:99
msgid "Next we download OpenVPN"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:82
msgid ""
"Once IP forwarding is done, we will need to download the latest release "
"of OpenvPN for our Debian 10 server, according to these instructions:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:97
msgid ""
"We downloaded OpenVPN 2.5 as \"password prompt\" requires at least "
"OpenVPN version 2.4.8 to login."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:104
msgid ""
"If you want to check the version, it possible by calling --version and "
"print the following:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:114
msgid "2. Install Easy-RSA"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:116
msgid ""
"To build the PKI, we will download the latest version of Easy-RSA on the "
"server and client machines. To get the latest release, go to the Releases"
" page on the official EasyRSA GitHub project, copy the download link for "
"the file ending in .tgz, and then paste it into the following command:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:118
msgid "1. Download the latest release"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:124
msgid "2. Extract the tarball"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:131
msgid "3. Create a PKI for OpenVPN server"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:133
msgid ""
"Before you can create your OpenVPN server’s private key and certificate, "
"you need to create a local Public Key Infrastructure directory on your "
"OpenVPN server. You will use this directory to manage the server and "
"clients’ certificate requests, instead of making them directly on your CA"
" server."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:135
msgid ""
"To build a PKI directory on your OpenVPN server, you’ll need to populate "
"a file called vars with some default values."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:137
msgid "1. Create a vars file"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:145
msgid "2. Once the file is opened, paste in the following two lines"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:152
msgid ""
"These are the only two lines that you need in this vars file on your "
"OpenVPN server since it will not be used as a Certificate Authority. They"
" will ensure that your private keys and certificate requests are "
"configured to use Elliptic Curve Cryptography (ECC) to generate keys, and"
" secure signatures for your clients and OpenVPN server."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:154
msgid ""
"In regards to the choice of the cryptographic algorithms, I follow the "
"model in this tutorial, and you can customize these according to your "
"specific needs."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:156
msgid "3. Initialize the PKI"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:158
msgid ""
"Once you have populated the vars file you can proceed with creating the "
"PKI directory. To do so, run the easyrsa script with the init-pki option:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:163
msgid ""
"After you’ve initialized your PKI on the OpenVPN server, you are ready to"
" move on to the next step, which is creating an OpenVPN server "
"certificate request and private key."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:165
msgid "4. Create server.req and server.key"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:167
msgid ""
"Now that your OpenVPN server has all the prerequisites installed, the "
"next step is to generate a key pair composed of a private key (to keep "
"secret), and a Certificate Signing Request (.csr) on your OpenVPN server."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:169
msgid ""
"In general terms, on systems where we generate a key and request, these "
"files are left unencrypted by using the nopass argument, since servers "
"usually need to start up without any password input. This generates an "
"unencrypted key, so mind protect its access and file permissions "
"carefully."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:171
msgid "::: tip Configuration notes from OpenVPN:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:173
msgid ""
"The server, and each client, must have their own cert and key file. The "
"server and all clients will use the same CA file."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:174
msgid "Server certificate should have the following:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:176
msgid "keyUsage:  digitalSignature, keyEncipherment"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:177
msgid "extendedKeyUsage: serverAuth"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:179
#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:207
#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:271
#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:504
#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:517
#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:623
msgid ":::"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:181
msgid "1. Create the signing request for the server"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:183
msgid ""
"Navigate to the ~/easyrsa directory on your OpenVPN Server as your non-"
"root user, and enter the following commands:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:189
msgid ""
"This will create a private key for the server and a certificate request "
"file called server.req."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:191
msgid ""
"Once you have a signed certificate, you’ll transfer it back to the "
"OpenVPN server."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:193
msgid "2. Copy the key to the OpenVPN server directory"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:199
msgid ""
"After completing these steps, you have successfully created a private key"
" for your OpenVPN server. You have also generated a Certificate Signing "
"Request for the OpenVPN server."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:201
msgid "::: tip File extensions for certificate signing requests"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:203
msgid ""
"The file extension that is adopted by the CA and HSM tutorial indicates "
"the creation of a .csr file, however Easy-RSA creates certificate signing"
" requests with a .req extension."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:205
msgid ""
"We will use interchangeably both extensions, while making sure that we "
"transfer the right files to the Certificate Authority, and generate a "
"final certificate with a .crt extension."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:209
msgid ""
"In the next section of this guide, we will sign a .req file with our CA "
"on deployed on the HSM 2 device. For this purpose, I will use a dedicated"
" machine to sign the requests."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:211
msgid "5. Sign and retrieve server.crt"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:212
msgid ""
"The following instructions require the transfer of the server.req (or "
"server.csr) file to the CA system."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:214
msgid ""
"The transfer itself is not security sensitive, though it is wise to "
"verify if the received file matches the sender's copy, if the transport "
"is untrusted."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:216
msgid ""
"In order to go through these steps, I will extensively rely on these "
"instructions, to sign the certificate signing requests, once we generated"
" them with Easy-RSA."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:218
msgid "1. Sign the server.req file"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:220
msgid ""
"On the local machine dedicated to access the HSM, we will use the tools "
"provided by Opensc 0.20 in order to sign the .req file, and send it back "
"to the OpenVPN server. We assume we have transferred the file from the "
"server machine to the CA machine."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:222
msgid ""
"First we start by plugging the HSM Nitrokey, and enter this instruction "
"for listing the keys available."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:224
msgid "Query the list of available devices"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:230
msgid ""
"​\t(Required step) If this is the first time you sign a certificate with "
"the CA, you might want to retrieve the URI of the CA's private key from "
"the HSM, and include it in the config file."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:232
msgid "The key's URI should be in this format:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:238
msgid "Create openvpn/ directory under certificate-authority/"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:244
msgid "Sign the server.req"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:250
msgid "2. Retrieve the server.crt file to the server machine"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:252
msgid "Transfer the signed certificates to the server"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:254
msgid ""
"From the CA machine, copy the files server.crt and chain.crt to the "
"OpenVPN server. In this example we will use the scp command as following:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:260
msgid "Place the certificates on the server's directory"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:265
msgid "::: warning CA Certificate and chain.crt"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:267
msgid ""
"In the above, the CA returns the signed sever certificate, and includes "
"the CA certificate CA.crt which is the chain.crt file. This can be done "
"over an insecure channel, though the client is encouraged to confirm if "
"the received chain.crt is valid, if the transport is untrusted."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:269
msgid ""
"It is possible to rename the file chain.crt file to CA.crt on the target "
"machine, however we will use chain.crt in the next instructions."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:273
msgid "6. Configure the OpenVPN server"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:275
msgid ""
"A connection that uses TLS requires multiple certificates and keys for "
"authentication. Now that we issued and signed those, we can place them in"
" the right directories. The breakdown of the certificates and keys that "
"must be located at the root directory are the following:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:284
msgid ""
"On your OpenVPN server, now you can create the configuration file "
"server.conf with your favorite text editor. The file can be configured "
"according to your needs, while we make sure to change the server "
"certificate and key sections according the names you chose for the your "
"the files we signed:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:293
msgid "Here is the configuration file we can use for testing these instructions:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:322
msgid "To test if the configuration functions properly, we can use this command:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:328
msgid "7. Start the OpenVPN service on the server"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:330
msgid ""
"Enable the OpenVPN service by adding it to systemctl, and start it using "
"these commands:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:337
msgid "To Double check if the OpenVPN service is active use this command:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:343
msgid "The OpenVPN should be running at this point."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:347
msgid "Client side configuration"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:358
msgid "1. Install OpenVPN and Easy-RSA"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:359
msgid "1. Install the software"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:361
msgid ""
"We can use directly dnf install to install OpenVPN 2.4.9 and Easy-RSA "
"3.0.7"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:367
msgid "2. Then we create as non-root a directory for Easy RSA called Easy-RSA"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:372
msgid "3. And link it to the Easy RSA package we just installed"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:378
msgid "2. Create a PKI for the OpenVPN client"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:380
msgid ""
"In the same manner we created a PKI on the OpenVPN server, we will create"
" a PKI using Easy-RSA on the client side."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:382
msgid "3. Create a client.req and client.key"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:384
msgid ""
"In the same manner we issued the key pair on the sever, we generate a key"
" pair for the client which will be composed of the client.req file and "
"the client.key file. The latter must be kept secret on the client "
"machine."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:386
msgid "4. Sign client.req and issue the client.crt file"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:388
msgid ""
"To transfer the client.req file to the CA machine, we will use the same "
"method as we did for the server.req file."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:390
msgid ""
"Once transferred, on the CA machine we sign the certificate signing "
"request file with this command"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:396
msgid "5. Import client.crt on the Nitrokey from the CA machine"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:397
msgid ""
"/// Some documentation says that we can use the ./pkitool script "
"available with Easy-RSA, to directly initialize a key pair on the "
"Nitrokey, however the pkitool utility seems to be deprecated ///"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:399
msgid ""
"After creating the client.crt file, we plug the Nitrokey Pro 2 device in "
"the CA machine, and import the .crt to the Pro 2 device using this "
"command:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:405
msgid ""
"You can see if the key is effectively stored on the Nitrokey using this "
"command:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:411
msgid "Or alternatively"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:416
msgid "Fore more commands you can refer to the OpenSC wiki."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:418
msgid "6. Retrieve the chain.crt file from the CA machine"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:420
msgid ""
"While we keep the client.crtstored on the nitrokey Pro 2 device, we must "
"retrieve the chain.crt file on the client machine, and store it in the "
"adequate directory. We may use scp as in the method explained in the "
"server section of this guide."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:422
msgid "7. Configure the client to interact with the Nitrokey"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:424
msgid ""
"Now back on the client machine, we will plug the Nitrokey Pro and use it "
"to establish the VPN connection with the server.  In general terms, a "
"connection that uses TLS requires multiple certificates and keys for "
"authentication:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:432
msgid ""
"For this guide we can the following client.conf file, and add the "
"required options to it accordingly:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:453
msgid "1. Determine the correct object"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:455
msgid ""
"Each PKCS#11 provider can support multiple devices. In order to view the "
"available object list you can use the following command:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:472
msgid ""
"Each certificate/private key pair have unique Serialized id string. The "
"serialized id string of the requested certificate should be specified, in"
" the configuration file. We can do this by adding the pkcs11-id option "
"using single quote marks."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:478
msgid "2. Add retrieved Serialized ID to the configuration file"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:480
msgid ""
"Using your favorite text editor, open the server.conf file, and add the "
"following lines, while taking care to insert your own Serialized id:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:487
msgid ""
"For additional settings related to OpenVPN authentication, you may also "
"add few lines to handle key maganagement, although it is optional."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:489
msgid "::: details Click to view the code"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:506
msgid "Optional step"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:508
msgid ""
"If you need to test the configuration, with and without the token on the "
"Nitrokey, you may add lines to the same client.conf and comment/uncomment"
" the relevant lines according to your needs: ::: details Click to view "
"the code"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:519
msgid "3. Configure the OpenVPN client"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:521
msgid "The final configuration file client.conf should look like this one:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:563
msgid "4. Known issues"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:565
msgid ""
"There are some known issues related to OpenVPN login with OpenSC. Please "
"consult these issues here."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:567
msgid "8. Start the OpenVPN client"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:569
msgid "1 Start the OpenVPN service on the client"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:571
msgid "Enable the OpenVPN service, and start it using these commands:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:578
msgid "To double check if the OpenVPN service is active use this command:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:584
msgid "2 Enter your User PIN"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:586
msgid "When executing OpenVPN client, Nitrokey's PIN needs to be entered:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:595
msgid ""
"Unfortunately OpenVPN doesn't seem to be able to establish a handshake "
"and stops at an error as reported here, here and here"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:597
msgid "::: warning error output"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:599
msgid ""
"$ sudo openvpn --client --config client.conf Fri Sep 11 17:42:01 2020 "
"OpenVPN 2.4.9 x86_64-redhat-linux-gnu [SSL (OpenSSL)] [LZO] [LZ4] [EPOLL]"
" [PKCS11] [MH/PKTINFO] [AEAD] built on Apr 24 2020 Fri Sep 11 17:42:01 "
"2020 library versions: OpenSSL 1.1.1g FIPS  21 Apr 2020, LZO 2.08 Fri Sep"
" 11 17:42:01 2020 PKCS#11: Adding PKCS#11 provider '/usr/lib64/pkcs11"
"/opensc-pkcs11.so' Enter User PIN (OpenPGP card) token Password: ****** "
"Fri Sep 11 17:42:12 2020 TCP/UDP: Preserving recently used remote "
"address: [AF_INET]18.157.180.240:1194 Fri Sep 11 17:42:12 2020 Socket "
"Buffers: R=[212992->212992] S=[212992->212992] Fri Sep 11 17:42:12 2020 "
"UDP link local: (not bound) Fri Sep 11 17:42:12 2020 UDP link remote: "
"[AF_INET]18.157.180.240:1194 Fri Sep 11 17:42:12 2020 NOTE: UID/GID "
"downgrade will be delayed because of --client, --pull, or --up-delay Fri "
"Sep 11 17:42:12 2020 TLS: Initial packet from "
"[AF_INET]18.157.180.240:1194, sid=d79690cf 9e38ce89 Fri Sep 11 17:42:12 "
"2020 VERIFY OK: depth=1, CN=server_CA Fri Sep 11 17:42:12 2020 VERIFY KU "
"OK Fri Sep 11 17:42:12 2020 Validating certificate extended key usage Fri"
" Sep 11 17:42:12 2020 ++ Certificate has EKU (str) TLS Web Server "
"Authentication, expects TLS Web Server Authentication Fri Sep 11 17:42:12"
" 2020 VERIFY EKU OK Fri Sep 11 17:42:12 2020 VERIFY OK: depth=0, "
"CN=server Fri Sep 11 17:42:12 2020 OpenSSL: error:141F0006:SSL "
"routines:tls_construct_cert_verify:EVP lib Fri Sep 11 17:42:12 2020 "
"TLS_ERROR: BIO read tls_read_plaintext error Fri Sep 11 17:42:12 2020 TLS"
" Error: TLS object -> incoming plaintext read error Fri Sep 11 17:42:12 "
"2020 TLS Error: TLS handshake failed Fri Sep 11 17:42:12 2020 "
"SIGUSR1[soft,tls-error] received, process restarting Fri Sep 11 17:42:12 "
"2020 Restart pause, 5 second(s)"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:625
msgid ""
"In some reported cases it does not prompt for a PIN on the terminal. One "
"workaround would be to use to use this command to login with the PIN:"
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:630
msgid ""
"Alternatively, you could recompile OpenVPN client with systemd support "
"disabled, and it will prompt you for the PIN as expected."
msgstr ""

#: ../../pro/linux/openvpn-configuration-with-easyrsa.md:632
msgid ""
"Another option, would be to login to your OpenVPN instance with the "
"Viscosity client which provides a better user experience especially for "
"entering the PIN."
msgstr ""

