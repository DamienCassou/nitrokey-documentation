# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Nitrokey
# This file is distributed under the same license as the Nitrokey Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nitrokey Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-27 17:16+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../start/linux/openpgp-key-generation-with-backup.md:1
msgid "OpenPGP Key Generation With Backup"
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:3
msgid "The following instructions explain the generation of OpenPGP keys and how to copy them to the Nitrokey. This method has the advantage of providing a backup of the keys in case of losing or breaking the Nitrokey. The instructions are based on the command line interface of GnuPG. Thus, you need to have GnuPG installed on your system. The newest GnuPG version for Windows can be found here and the newest version for MacOS can be found here. Users of Linux systems please install GnuPG with help of the package manager."
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:5
msgid "Key Generation"
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:7
msgid "At first, you need to generate a key locally. You can decide, which key attributes to use and - most importantly - you can export the key and keep it somewhere save in case you need to restore the key."
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:9
msgid "Main Key and Encryption Subkey"
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:11
msgid "We can use the command gpg --full-generate-key --expert to start a guided key generation with all possible options. You can choose the key type (usually RSA (1) or ECC (9)), the length of the key and other attributes. The following output is just a simple example, you may choose other values."
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:73
msgid "The following table illustrates which algorithm can be used on which device, in case you want to use different key attributes."
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:75
msgid "|                 | Start           | Pro + Storage  | Pro 2 + Storage 2 | | --------------: |:---------------:| --------------:|------------------:| | rsa1024         |       ✓         |        ✓       |                   | | rsa2048         |       ✓         |        ✓       |         ✓         | | rsa3072         |                 |        ✓       |         ✓         | | rsa4096         |                 |        ✓       |         ✓         | | curve25519 (ECC)|       ✓         |                |                   | | NIST (ECC)      |       ✓         |                |         ✓         | | Brainpool (ECC) |                 |                |         ✓         | | secp256k1       |       ✓         |                |                   |"
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:86
msgid "Subkey for Authentication"
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:88
msgid "You now have a main key with the capability to sign and certify (marked as [SC]) and a subkey for encryption (marked as [E]). It is necessary to have another subkey for use cases in which authentication is needed. This subkey is generated in the next step. Type in gpg --edit-key --expert keyID to start the process, whereas \"keyID\" is either the id of the key or the email address used during key generation."
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:108
msgid "Now you are in the interactive mode of GnuPG and you can add a key by simply typing addkey. You need to choose the key you want to use. It is crucial to choose \"set your own capabilities\", because we want to have the \"authenticate\" capability which is not available otherwise. We toggle sign and encrypt by typing s and e and we activate authenticate by typing a."
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:166
msgid "We quit with q. Afterwards we need to answer the same questions as before. Finally, we have a ready-to-go key set which we can import to our device."
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:200
msgid "Now is good time to backup your key. Please keep this backup very secure. It is best practice to never have this key on a regular computer which has connection to the internet, so that the key never gets compromised. You can create a backup with something like:"
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:206
msgid "Key Import"
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:208
msgid "You have a main key and two subkeys which can be imported to your Nitrokey. Before proceeding please make sure that you really have a backup of the key, if you need one. The keytocard command used in the next steps will delete your key from your disk!"
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:210
msgid "We start the process by accessing the interactive interface of GnuPG again with gpg --edit-key --expert keyID, whereas keyID is either the id of the key or the email address used during key generation."
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:246
msgid "We just imported the main key to the card. Now we proceed with the two subkeys. We type key 1 to select the encryption subkey and type in keytocard again and select the slot to use."
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:275
msgid "Now we deselect the first key with key 1 and select the second subkey with key 2 and move it as well with keytocard. Afterwards we quit and save the changes."
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:318
msgid "Your keys are now moved to the Nitrokey and thus secured in hardware. Congratulations!"
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:320
msgid "Exporting Public Key and Keyserver Usage"
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:322
msgid "Although you can start to use your Nitrokey right away after generating the keys on your system, you need to import your public key on every system, you want to use the Nitrokey on. So to be prepared you have two options: You either save the public key anywhere you like and use it on another system or you save the public key on a webpage/keyserver."
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:324
msgid "Generating a Public Key File"
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:326
msgid "To get a simple file of your public key, you can just use gpg --armor --export keyID > pubkey.asc. Use either the fingerprint as \"keyID\" (look at gpg -K to get it) or just use your email address as an identifier."
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:328
msgid "You can carry this file with you or send it to anyone who you like. This file is not secret at all. If you want to use the Nitrokey on another system, you first import this public key via gpg --import pubkey.asc and then types gpg --card-status so that the system knows where to look for this key. That's all."
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:330
msgid "Uploading the Public Key"
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:332
msgid "If you do not want to carry a public keyfile with you, you can upload it to keyserver. You can do this by typing gpg --keyserver search.keyserver.net --send-key keyID. If you are using another machine you can just import it by using gpg --keyserver search.keyserver.net --recv-key keyID."
msgstr ""

#: ../../start/linux/openpgp-key-generation-with-backup.md:334
msgid "Another possibility is to change the URL setting on your card. Start gpg --card-edit again and first set the URL where the key is situated (e.g. on the keyserver or on your webpage etc.) via the url command. From now on you can import the key on another system by just using the fetch command within the gpg --card-edit environment."
msgstr ""

